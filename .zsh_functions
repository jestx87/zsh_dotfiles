function ansible_playbook_vsphere() {
  if [ -f ~/.ssh/vagrant_key ]; then
    VAGRANTKEYFILE="--private-key=~/.ssh/vagrant_key"
  else
    VAGRANTKEYFILE=""
  fi
  read -s PASS"?vSphere Password (will be hidden):"; export VMWARE_PASSWORD=$PASS; DIR=$PWD; cd ~/dev/pm-admin/; ansible-playbook -e 'local_ansible_run_vsphere=true local_ansible_python_interpreter=/opt/homebrew/bin/python3.12' --user=vagrant $VAGRANTKEYFILE --vault-password-file=.vaultpass $@; cd $DIR; export VMWARE_PASSWORD=
}
function ansible_playbook_vagrant() {
  if [ -f ~/.ssh/vagrant_key ]; then
    VAGRANTKEYFILE="--private-key=~/.ssh/vagrant_key"
  else
    VAGRANTKEYFILE=""
  fi
  DIR=$PWD; cd ~/dev/pm-admin/; ansible-playbook -e 'local_ansible_python_interpreter=/opt/homebrew/bin/python3.12' --user=vagrant $VAGRANTKEYFILE --vault-password-file=.vaultpass $@; cd $DIR
}
function ansible_facts_vagrant() {
  if [ -f ~/.ssh/vagrant_key ]; then
    VAGRANTKEYFILE="--private-key=~/.ssh/vagrant_key"
  else
    VAGRANTKEYFILE=""
  fi
  DIR=$PWD; cd ~/dev/pm-admin/; ansible -e 'local_ansible_python_interpreter=/opt/homebrew/bin/python3.12' --user=vagrant $VAGRANTKEYFILE --vault-password-file=.vaultpass -m ansible.builtin.setup $@ | sed 's/.*=> //' | jq '.[]'; cd $DIR
}
function ansible_playbook_ansible() {
  if [ -f ~/.ssh/vagrant_key ]; then
    VAGRANTKEYFILE="--private-key=~/.ssh/vagrant_key"
  else
    VAGRANTKEYFILE=""
  fi
  DIR=$PWD; cd ~/dev/pm-admin/; ansible-playbook -e 'local_ansible_python_interpreter=/opt/homebrew/bin/python3.12' --user=ansible $VAGRANTKEYFILE --vault-password-file=.vaultpass $@; cd $DIR
}
function ansible_facts_ansible() {
  if [ -f ~/.ssh/vagrant_key ]; then
    VAGRANTKEYFILE="--private-key=~/.ssh/vagrant_key"
  else
    VAGRANTKEYFILE=""
  fi
  DIR=$PWD; cd ~/dev/pm-admin/; ansible -e 'local_ansible_python_interpreter=/opt/homebrew/bin/python3.12' --user=ansible $VAGRANTKEYFILE --vault-password-file=.vaultpass -m ansible.builtin.setup $@ | sed 's/.*=> //' | jq '.[]'; cd $DIR
}
function dotfiles_git_pull() {
  if [ ! -z  "$proxy" ]; then
    export http_proxy=$proxy
    export https_proxy=$proxy
  fi
  dotfiles_folder=( ~/.dotfiles ~/.oh-my-zsh ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting  )
  for i in "${dotfiles_folder[@]}"
  do
    echo "$i"; git -C $i pull
  done
  if [ ! -z  "$proxy" ]; then
    unset http_proxy
    unset https_proxy
  fi
}
function omzupdate() {
  if [ ! -z  "$proxy" ]; then
    export http_proxy=$proxy
    export https_proxy=$proxy
  fi
  omz update
  if [ ! -z  "$proxy" ]; then
    unset http_proxy
    unset https_proxy
  fi
}
function starshipupdate() {
  if [ ! -z  "$proxy" ]; then
    export http_proxy=$proxy
    export https_proxy=$proxy
  fi
  sh -c "$(curl -fsSL https://starship.rs/install.sh)"
  if [ ! -z  "$proxy" ]; then
    unset http_proxy
    unset https_proxy
  fi
}
function azuressh {
  AZUREIP=$@
  AZURESSHFILE=~/.ssh/azure/$AZUREIP
  az ssh config --file $AZURESSHFILE --ip $AZUREIP --overwrite
  ssh $AZUREIP -F $AZURESSHFILE -o StrictHostKeyChecking=no
  rm -rf ~/.ssh/azure/az_ssh_config/$AZUREIP ~/.ssh/azure/$AZUREIP
}
